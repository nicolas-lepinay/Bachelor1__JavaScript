// Develop a trap to capture the elements when the mouse is getting too close to the center of the page!
//     1Ô∏è‚É£ Create a function createCircle: make it fire on every click on the page, and create a div at the position of the mouse on the screen, setting its background to white and its class to circle
//     2Ô∏è‚É£ Create a function moveCircle: make it fire when the mouse moves, and get the last circle created and makes it move along with the mouse
//     3Ô∏è‚É£ Create a function setBox which sets a box with the class 'box' in the center of the page ; when a circle is inside that box, it has to be purple (use the CSS global variable 'var(--purple)' as background).
//         Once a circle enters the box, it is trapped inside and cannot go out of it anymore.
// üí° Hint: Be careful, a circle cannot overlap the box which has walls of 1px, it has to be trapped strictly inside.
// üí° Check this link for help : https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect

// üìú Note 1 : mouseEvent.client(X ou Y)        ü°Ü   sert √† r√©cup√©rer (lire) les coordonn√©es du curseur de la souris.
// üìú Note 2 : element.getBoundingClientRect()  ü°Ü   sert √† r√©cup√©rer les coordonn√©es d'un √©l√©ment (left, right, top, bottom, width, height).
// üìú Note 3 : element.style(.left ou .top)     ü°Ü   sert √† *assigner* des coordonn√©es √† un √©l√©ment.


export { createCircle, moveCircle, setBox }

function createCircle() 
{
    document.addEventListener("click", addNewCircle)     // A chaque clic sur la page, on ex√©cute la fonction addNewCircle d√©finie plus bas.
    
    function addNewCircle(myMouseEvent)     // myMouseEvent repr√©sente le curseur de la souris lorsqu'on fait un clic.
    {
        let myCircle = document.createElement("div");
        myCircle.classList.add("circle");
        myCircle.style.background = "white";

        let x = myMouseEvent.clientX - 25;      // myMouseEvent.clientX (read-only) : coordonn√©e horizontale du curseur de la souris (centre du cercle). On garde une marge de 25px car c'est le rayon du cercle, qui ne doit pas d√©passer de l'√©cran.
        let y = myMouseEvent.clientY - 25;      // myMouseEvent.clientY (read-only) : coordonn√©e verticale du curseur de la souris (centre du cerlce). On garde une marge de 25px pour la m√™me raison.

        myCircle.style.left = `${x}px` ;        // On donne √† la coordonn√©e horizontale du cercle la valeur de la position horizontale du curseur de la souris.
        myCircle.style.top = `${y}px` ;         // On donne √† la coordonn√©e verticale du cercle la valeur de la position verticale du curseur de la souris.

        // Si le curseur de la souris rentre dans la 'bo√Æte' (rectangle central), on cr√©e des cercles violets plut√¥t que blancs :
        if(isInBox(x, y)) { myCircle.style.background = "var(--purple)" }

        document.body.appendChild(myCircle);      // On ajoute le cercle au document HTML.

        
    }
}



function isInBox(x, y) 
{
    let box = document.getElementsByClassName("box")[0];

    // On d√©finit les coordonn√©es gauche, droite, haute et basse de la bo√Æte :
    let boxLeft = box.getBoundingClientRect().left;     // getBoundingClientRect().left ü°Ñü°Ü getBoundingClientRect().x (√©quivalents).
    let boxRight = box.getBoundingClientRect().right - 50;
    let boxTop = box.getBoundingClientRect().top;       // getBoundingClientRect().top ü°Ñü°Ü getBoundingClientRect().y (√©quivalents).
    let boxBottom = box.getBoundingClientRect().bottom - 50;

    // Si les coordonn√©es x et y du curseur sont dans les limites de la bo√Æte, on renvoie true :
    if(x > boxLeft && x < boxRight && y > boxTop && y < boxBottom) { return true}
}



function moveCircle() 
{
    document.addEventListener("mousemove", moveMyCircle)    // A chaque mouvement de la souris, on ex√©cute la fonction moveMyCircle d√©finie plus bas.
    
    function moveMyCircle(myMouseEvent)     // myMouseEvent repr√©sente le curseur de la souris √† chacun de ses d√©placements.
    {
        let allCircles = document.getElementsByClassName("circle")
        let myCircle = allCircles[allCircles.length - 1];
        let box = document.getElementsByClassName("box")[0];

        // Positions x et y du curseur de la souris √† chaque instant :
        let x = myMouseEvent.clientX - 25;
        let y = myMouseEvent.clientY - 25;

        // Coordonn√©es de la bo√Æte :
        let boxLeft = box.getBoundingClientRect().left;
        let boxRight = box.getBoundingClientRect().right - 50;
        let boxTop = box.getBoundingClientRect().top;
        let boxBottom = box.getBoundingClientRect().bottom - 50;

        // Si le curseur de la souris passe dans la bo√Æte, il devient violet :
        if(isInBox(x, y))
        { 
            myCircle.style.background = "var(--purple)" 
        }

        // Si le cercle g√©n√©r√© est de couleur violette, il ne doit plus pouvoir sortir de la bo√Æte :
        if(myCircle.style.background.startsWith("var(--purple)"))
        {
            // 1Ô∏è‚É£ A l'horizontal :
            if(x > boxLeft && x < boxRight)    // Si la position horizontale du curseur est comprise entre les c√¥t√©s gauche et droit de la bo√Æte...
            {
                myCircle.style.left = `${x}px` ;    // ...alors la coordonn√©e horizontale du cercle prend la position x du curseur (c-√†-d, le cercle suit parfaitement le curseur).
            }
            else    // Sinon...
            {
                if(x < boxLeft) { myCircle.style.left = `${boxLeft}px` }  // ...si le curseur se d√©place √† gauche de la bo√Æte, la coord. horiz. du cercle prend pour valeur la coord. du c√¥t√© gauche de la bo√Æte : donc le cercle ne pourra jamais sortir/d√©passer de la bo√Æte par la gauche, puisque sa coord. horiz. est celle de la limite gauche de la bo√Æte.
                if(x > boxRight) { myCircle.style.left = `${boxRight}px` }  // ...si le curseur se d√©place √† droite de la bo√Æte, la coord. horiz. du cercle prend pour valeur la coord. du c√¥t√© droit de la bo√Æte : donc le cercle ne pourra jamais sortir/d√©passer de la bo√Æte par la droite, puisque sa coord. horiz. est celle de la limite droite de la bo√Æte.
            }
            
            // 2Ô∏è‚É£ A la verticale :
            if(y > boxTop && y < boxBottom)     // Si la position verticale du curseur est comprise entre les c√¥t√©s haut et bas de la bo√Æte...
            {
                myCircle.style.top = `${y}px` ;     // ...alors la coordonn√©e verticale du cercle prend la position y du curseur (c-√†-d, le cercle suit parfaitement le curseur).
            }
            else    // Sinon...
            {
                if(y < boxTop) { myCircle.style.top = `${boxTop}px` }  // ...si le curseur se d√©place au dessus de la bo√Æte, la coord. verti. du cercle prend pour valeur la coord. du c√¥t√© haut de la bo√Æte : donc le cercle ne pourra jamais sortir/d√©passer de la bo√Æte par en haut, puisque sa coord. verti. est celle de la limite haute de la bo√Æte.
                if(y > boxBottom) { myCircle.style.top = `${boxBottom}px` }  // ...si le curseur se d√©place sous la bo√Æte, la coord. verti. du cercle prend pour valeur la coord. du c√¥t√© bas de la bo√Æte : donc le cercle ne pourra jamais sortir/d√©passer de la bo√Æte par en bas, puisque sa coord. verti. est celle de la limite basse de la bo√Æte.
            }
    }
    else    // Si le cercle g√©n√©r√© n'est pas violet mais blanc, alors les coordonn√©es du cercle sont les coordonn√©es du curseur :
    {
        myCircle.style.left = `${x}px` ;
        myCircle.style.top = `${y}px` ;
    }
}
}



function setBox() 
{
    let box = document.createElement("div");
    box.classList.add("box");
    document.body.appendChild(box);
}